Weir
=======================

Components:
Reader - main class instantiates others
Hound - fetches RSS on a timer, dispatches events with new counts when the fetch concludes
Database.js - tech-specific database layer, start with pgsql
Console - logs out to a file (eventually) or to stdout (currently)
Config - key/value store loaded from JSON
Server - HTTP requests and AJAX calls
Stream - Registers routes and passes on to the database
Manos - utility functions for async without importing all of caolan's library
Freedom - import/export, starting with OPML
Security - Manage sessions, TOTP authorization

Client components (all namespaced as "Weir.*"):
StreamController - handle stream display and UI, plus some app-level UI
SettingsController - handle showing and saving settings, plus showing security warning
FeedController - handle (un)subscribing, tagging
DisplayStack - manage major component visibility, dialogs, errors, warnings
Events - service for pubsub events, useful for scrolling and service notification
LocalSettings - Client-side preferences
Request - Wraps requests to handle security authorization and errors
Sanitize - Removes scripts, unwanted styles, defers images
Scroll - Throttles scroll events, provides scroll visibility directives
Server - Handles AJAX API and primary stream model
Main - contains primary app seed, random directives

Notes (vaguely ordered):

 - Set up Weir.DisplayStack.dialog()
 - Change Mobile menu items:
  * Top: Refresh, Settings, Manage Feeds (hide on mobile?)
  * Charms: Mark All, Next Item, Open Current in New Tab
  * Add close button to all items
 - Add feed management (subscribing, at least, if not unsubscribing and renaming)
  * Enable (un)subscribe from client
  * Add a Feeds server component for subscribing, grabbing feed metadata first
  * Enable sorting of feeds by result, name, tag (eventually)
 - Enable date stamps, log levels in console.log
 - Feed log to file, not stdout
 - Update favicon when there are new unread stream items
 - Create an actual App module, rewrite other modules more Angular-like
 - Turn on error output for ask(), Stream
 - Disable timed fetch on mobile
 - Disable top activation by default, more like Google Reader
 - Remove CSS compilation from the Server?
 - Add ability to write cfg.json with .save();
 - Weir.Sanitize improvements
  * Allow Weir.Sanitize to resize elements if they would be too big (scale movies, etc)
  * Add rudimentary ad/social blocking
 - Add to options service
  * key remapping or compatibility
  * list length
  * infinite scroll?
  * visual theme colors? (from a palette)
  * refresh rate
  * buttons on sidebar
 - Add tags
 - Configure router to support REST params
