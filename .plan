Weir
=======================

Components:
Reader - main class instantiates others
Hound - fetches RSS on a timer, dispatches events with new counts when the fetch concludes
Database.js - tech-specific database layer, start with pgsql
Console - logs out to a file (eventually) or to stdout (currently)
Config - key/value store loaded from JSON
Server - HTTP requests and AJAX calls
Stream - Registers routes and passes on to the database
Manos - utility functions for async without importing all of caolan's library
Freedom - import/export, starting with OPML
Security - Manage sessions, TOTP authorization

Notes (vaguely ordered):

 - Add a top-level display controller to toggle between views (options, feeds, stream)
  * include real dialog service for TOTP entry, alerts
 - Add feed management (subscribing, at least, if not unsubscribing and renaming)
 - Turn on error output for ask(), Stream
 - Change the Hound to fetch in numbered batches, instead of 1/10 portions
 - Remove CSS compilation from the Server?
 - Add ability to write cfg.json with .save();
 - Weir.Sanitize improvements
  * Allow Weir.Sanitize to resize elements if they would be too big (scale movies, etc)
  * Add rudimentary ad/social blocking
  * Show elements on scroll enter, not activate
 - Add to options service
  * key remapping or compatibility
  * list length
  * infinite scroll?
  * visual theme colors? (from a palette)
  * refresh rate
  * should buttons mark all or just refresh?
  * buttons on sidebar
 - Add tags
 - Configure router to support REST params
