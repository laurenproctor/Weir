Weir
=======================

Components:
Reader - main class instantiates others
Hound - fetches RSS on a timer, dispatches events with new counts when the fetch concludes
Database.js - tech-specific database layer, start with pgsql
Console - logs out to a file (eventually) or to stdout (currently)
Config - key/value store loaded from JSON
Server - HTTP requests and AJAX calls
Stream - Registers routes and passes on to the database
Manos - utility functions for async without importing all of caolan's library
Freedom - import/export, starting with OPML
Security - Manage sessions, TOTP authorization

Notes (vaguely ordered):

 - Tweak scroll UX:
  * Mobile:
    + Images and embeds are loaded only on activation
    + Items are marked read only on activation
  * Desktop
    + Images and embeds are loaded once an element has scrolled on screen
    + Items are marked read on activation, but
    + Scroll should activate an item once it's the nearest on-screen item, and
    + Spacebar should only scroll a full length if the article is very long
  * Both
    + Scroll events need to be able to trigger activate
    + Controller also needs to have access to a list of elements that are past the fold
    + We need to know more about the next element before scrolling, or treat space as j
    + This is clearly not an easy solution
 - Turn on error output for ask(), Stream
 - invent real dialog service for TOTP entry, alerts
 - Add feed management (subscribing, at least, if not unsubscribing and renaming)
 - Add ability to write cfg.json with .save();
 - Add some local style removal to Weir.Sanitize
  * Allow Weir.Sanitize to resize elements if they would be too big (scale movies, etc)
 - reconsider general AJAX API, flow
 - Add to options service
  * key remapping or compatibility
  * list length
  * infinite scroll?
  * visual theme colors? (from a palette)
  * refresh rate
  * should buttons mark all or just refresh?
  * buttons on sidebar
 - Add tags
 - Configure router to support REST params
